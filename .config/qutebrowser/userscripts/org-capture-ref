#!/usr/bin/env bash

rawurlencode() {
    local string="${1}"
    local strlen=${#string}
    local encoded=""
    local pos c o

    for (( pos=0 ; pos<strlen ; pos++ )); do
	c=${string:$pos:1}
	case "$c" in
            [-_.~a-zA-Zа-яА-Я0-9] ) o="${c}" ;;
	    [\[\]] ) o="|" ;;
	    * )               printf -v o '%%%02x' "'$c"
	esac
	encoded+="${o}"
    done
    echo "${encoded}"    # You can either set a return variable (FASTER) 
    REPLY="${encoded}"   #+or echo the result (EASIER)... or both... :p
}

# Returns a string in which the sequences with percent (%) signs followed by
# two hex digits have been replaced with literal characters.
rawurldecode() {

    # This is perhaps a risky gambit, but since all escape characters must be
    # encoded, we can replace %NN with \xNN and pass the lot to printf -b, which
    # will decode hex for us

    printf -v REPLY '%b' "${1//%/\\x}" # You can either set a return variable (FASTER)

    #  echo "${REPLY}"  #+or echo the result (EASIER)... or both... :p
}


# Initialize all the option variables.
# This ensures we are not contaminated by variables from the environment.
TEMPLATE="z"
FORCE=""

while :; do
    case $1 in
	--force)       # Takes an option argument; ensure it has been specified.
	    FORCE="t"
	    shift
            ;;
        --silent)
	    TEMPLATE="Z"
            shift
            ;;
        --rss)
            TEMPLATE="r"
            shift
            ;;
        --skeleton)
            TEMPLATE="s"
            shift
            ;;
        *)
            break
    esac
    shift 
done 

rawurlencode "$QUTE_URL"
URL="$REPLY"

TITLE="$(echo $QUTE_TITLE | sed -r 's/&//g')"

SELECTED_TEXT="$QUTE_SELECTED_TEXT"

(emacsclient "org-protocol://capture?template=$TEMPLATE&url=$URL&title=$TITLE&body=$SELECTED_TEXT&html=$QUTE_HTML&qutebrowser-fifo=$QUTE_FIFO"\
     && echo "message-info '$(cat ~/Org/inbox.org | grep \* | tail -n1)'" >> "$QUTE_FIFO" || echo "message-error \"Bookmark not saved!\"" >> "$QUTE_FIFO");
